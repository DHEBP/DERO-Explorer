({
name: 'transactions',
version: '2.0.0',

async renderTransaction(txHash, xswdCall) {
    try {
        const txResponse = await xswdCall('DERO.GetTransaction', { txs_hashes: [txHash], decode_as_json: 1 });
        if (!txResponse || !txResponse.txs || txResponse.txs.length === 0) {
            return this.renderTransactionNotFound(txHash);
        }

        const tx = txResponse.txs[0];
        const txData = tx.as_json ? JSON.parse(tx.as_json) : {};
        const txHex = txResponse.txs_as_hex ? txResponse.txs_as_hex[0] : '';
        
        let timestamp;
        if (tx.block_height && tx.block_height > 0) {
            timestamp = tx.block_timestamp ? new Date(tx.block_timestamp * 1000) : new Date();
        } else {
            timestamp = new Date();
        }

        const age = this.formatAge(Date.now() - timestamp.getTime());
        const actualSize = txHex ? txHex.length / 2 : 0;
        const ringSize = this.calculateRingSize(txData);
        const txType = this.determineTxType(txData, ringSize);
        
        return this.renderTransactionDetails(txHash, tx, txData, timestamp, age, actualSize, ringSize, txType);
    } catch (error) {
        console.error('Transaction rendering failed:', error);
        return this.renderTransactionError(txHash, error);
    }
},

renderTransactionNotFound(txHash) {
    return `<div class="enhanced-card">
        <div class="card-header">
            <h2 style="color: #52c8db; font-size: 1.6rem; font-weight: 700; margin: 0;">Transaction Not Found</h2>
        </div>
        <div class="card-content">
            <div style="background: rgba(239,68,68,0.1); border: 1px solid rgba(239,68,68,0.3); border-radius: 8px; padding: 2rem; text-align: center; border-left: 4px solid #ef4444;">
                <div style="color: #ef4444; font-size: 1.3rem; font-weight: 700; margin-bottom: 1rem;">Transaction Not Found</div>
                <div style="color: #b3b3b3; font-size: 0.9rem; margin-bottom: 1.5rem;">No transaction found with hash: <code style="color: #ef4444; background: rgba(0,0,0,0.2); padding: 0.2rem 0.5rem; border-radius: 4px;">${txHash}</code></div>
                <button onclick="window.location.hash='transactions'" style="background: rgba(82,200,219,0.1); border: 1px solid #52c8db; color: #52c8db; padding: 0.75rem 1.5rem; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">‚Üê Back to Transactions</button>
            </div>
        </div>
    </div>`;
},

renderTransactionError(txHash, error) {
    return `<div class="enhanced-card">
        <div class="card-header">
            <h2 style="color: #52c8db; font-size: 1.6rem; font-weight: 700; margin: 0;">Error Loading Transaction</h2>
        </div>
        <div class="card-content">
            <div style="background: rgba(239,68,68,0.1); border: 1px solid rgba(239,68,68,0.3); border-radius: 8px; padding: 2rem; text-align: center; border-left: 4px solid #ef4444;">
                <div style="color: #ef4444; font-size: 1.3rem; font-weight: 700; margin-bottom: 1rem;">Loading Error</div>
                <div style="color: #b3b3b3; font-size: 0.9rem; margin-bottom: 1.5rem;">Failed to load transaction: ${error.message}</div>
                <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
                    <button onclick="window.location.hash='transactions'" style="background: rgba(82,200,219,0.1); border: 1px solid #52c8db; color: #52c8db; padding: 0.75rem 1.5rem; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">‚Üê Back to Transactions</button>
                    <button onclick="window.location.reload()" style="background: rgba(239,68,68,0.1); border: 1px solid #ef4444; color: #ef4444; padding: 0.75rem 1.5rem; border-radius: 6px; cursor: pointer; font-weight: 500; transition: all 0.2s ease;">üîÑ Retry</button>
                </div>
            </div>
        </div>
    </div>`;
},

renderTransactionDetails(txHash, tx, txData, timestamp, age, actualSize, ringSize, txType) {
    const header = this.renderTransactionHeader(txHash, age, txType);
    const stats = this.renderTransactionStats(tx, actualSize, ringSize);
    const details = this.renderTransactionDetailsSections(txHash, tx, txData, timestamp);
    const inputs = this.renderTransactionInputs(txData);
    const outputs = this.renderTransactionOutputs(txData);
    
    return `<div class="enhanced-card">
        <div class="card-header">
            <div style="display: flex; align-items: center; gap: 1rem;">
                <button onclick="window.location.hash='transactions'" style="background: rgba(82,200,219,0.1); border: 1px solid #52c8db; color: #52c8db; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">‚Üê Back to Transactions</button>
                <span style="color: #888;">|</span>
                <span style="color: #52c8db; font-weight: 500;">Transaction Explorer</span>
            </div>
            <div class="actions">
                <button onclick="navigator.clipboard.writeText('${txHash}')" style="background: rgba(82,200,219,0.1); border: 1px solid #52c8db; color: #52c8db; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;" title="Copy Hash">Copy</button>
                <button onclick="window.location.reload()" style="background: rgba(82,200,219,0.1); border: 1px solid #52c8db; color: #52c8db; padding: 0.5rem 1rem; border-radius: 6px; cursor: pointer; transition: all 0.2s ease; font-weight: 500;">Refresh</button>
            </div>
        </div>
        <div class="card-content">
            ${header}
            ${stats}
            ${details}
            ${inputs}
            ${outputs}
        </div>
    </div>`;
},

renderTransactionHeader(txHash, age, txType) {
    return `<div style="margin-bottom: 2rem;">
        <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 1.5rem; flex-wrap: wrap; gap: 1rem;">
            <div>
                <h2 style="color: #52c8db; margin: 0; font-size: 1.6rem; font-weight: 700;">Transaction Details</h2>
                <div style="color: #b3b3b3; margin-top: 0.5rem; font-size: 0.9rem;">${age}</div>
            </div>
            <div style="padding: 0.5rem 1rem; background: rgba(82,200,219,0.15); color: #52c8db; border-radius: 16px; font-size: 0.9rem; font-weight: 600; border: 1px solid rgba(82,200,219,0.3);">
                ${txType}
            </div>
        </div>
        
        <div style="margin-bottom: 2rem;">
            <h3 style="color: #52c8db; margin-bottom: 1rem; font-size: 1.2rem; font-weight: 600;">Transaction Hash</h3>
            <div style="background: rgba(0,0,0,0.2); border: 1px solid rgba(82,200,219,0.3); padding: 1rem; border-radius: 8px; font-family: monospace; font-size: 0.9rem; word-break: break-all; color: #b959b6;">${txHash}</div>
        </div>
    </div>`;
},

renderTransactionStats(tx, actualSize, ringSize) {
    const ringColor = this.getRingColor(ringSize);
    const ringBorderColor = this.getRingBorderColor(ringSize);
    
    return `<div class="stats-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem; margin-bottom: 2rem;">
        <div class="stat-card" style="background: rgba(0,0,0,0.2); border: 1px solid rgba(82,200,219,0.3); padding: 1.5rem; border-radius: 8px; text-align: center; transition: all 0.2s ease;">
            <div style="color: #52c8db; font-size: 1.8rem; font-weight: 700; margin-bottom: 0.5rem;">${tx.block_height || 'Pending'}</div>
            <div style="color: #b3b3b3; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px;">Block Height</div>
        </div>
        <div class="stat-card" style="background: rgba(0,0,0,0.2); border: 1px solid rgba(251,191,36,0.3); padding: 1.5rem; border-radius: 8px; text-align: center; transition: all 0.2s ease;">
            <div style="color: #fbbf24; font-size: 1.8rem; font-weight: 700; margin-bottom: 0.5rem;">${((tx.fee || 0) / 100000).toFixed(5)} DERO</div>
            <div style="color: #b3b3b3; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px;">Fee</div>
        </div>
        <div class="stat-card" style="background: rgba(0,0,0,0.2); border: 1px solid rgba(74,222,128,0.3); padding: 1.5rem; border-radius: 8px; text-align: center; transition: all 0.2s ease;">
            <div style="color: #4ade80; font-size: 1.8rem; font-weight: 700; margin-bottom: 0.5rem;">${actualSize.toLocaleString()} bytes</div>
            <div style="color: #b3b3b3; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px;">Size</div>
        </div>
        <div class="stat-card" style="background: rgba(0,0,0,0.2); border: 1px solid ${ringBorderColor}; padding: 1.5rem; border-radius: 8px; text-align: center; transition: all 0.2s ease;">
            <div style="color: ${ringColor}; font-size: 1.8rem; font-weight: 700; margin-bottom: 0.5rem;">${ringSize}</div>
            <div style="color: #b3b3b3; font-size: 0.85rem; text-transform: uppercase; letter-spacing: 0.5px;">Ring Size</div>
        </div>
    </div>`;
},

renderTransactionDetailsSections(txHash, tx, txData, timestamp) {
    return `<div style="background: rgba(0,0,0,0.2); border: 1px solid rgba(82,200,219,0.3); padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem;">
        <h3 style="color: #52c8db; margin: 0 0 1.5rem 0; font-size: 1.2rem; font-weight: 600;">Transaction Details</h3>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1.5rem;">
            <div>
                <div style="color: #b3b3b3; font-size: 0.8rem; margin-bottom: 0.5rem; text-transform: uppercase; letter-spacing: 0.5px;">Timestamp</div>
                <div style="color: #fff; font-weight: 500;">${timestamp.toLocaleString()}</div>
            </div>
            <div>
                <div style="color: #b3b3b3; font-size: 0.8rem; margin-bottom: 0.5rem; text-transform: uppercase; letter-spacing: 0.5px;">Confirmations</div>
                <div style="color: #fff; font-weight: 500;">${tx.confirmations || 0}</div>
            </div>
            <div>
                <div style="color: #b3b3b3; font-size: 0.8rem; margin-bottom: 0.5rem; text-transform: uppercase; letter-spacing: 0.5px;">In Pool</div>
                <div style="color: ${tx.in_pool ? '#fbbf24' : '#4ade80'}; font-weight: 600;">${tx.in_pool ? 'Yes' : 'No'}</div>
            </div>
            <div>
                <div style="color: #b3b3b3; font-size: 0.8rem; margin-bottom: 0.5rem; text-transform: uppercase; letter-spacing: 0.5px;">Data Size</div>
                <div style="color: #fff; font-weight: 500;">${tx.size ? `${(tx.size).toLocaleString()} bytes` : 'N/A'}</div>
            </div>
        </div>
    </div>`;
},

renderTransactionInputs(txData) {
    let inputsHtml = '';
    
    if (txData.vin && txData.vin.length > 0) {
        inputsHtml = txData.vin.map((input, index) => `
            <div style="padding: 1rem 0; border-bottom: 1px solid rgba(255,255,255,0.1); last-child:border-bottom: none;">
                <div style="color: #52c8db; font-weight: 600; margin-bottom: 0.5rem;">Input ${index + 1}</div>
                <div style="font-family: monospace; color: #b3b3b3; font-size: 0.85rem; word-break: break-all;">${input.k_image || input.key?.k_image || 'N/A'}</div>
            </div>
        `).join('');
    } else {
        inputsHtml = '<div style="padding: 2rem; text-align: center; color: #b3b3b3;">No inputs (coinbase transaction)</div>';
    }
    
    return `<div style="background: rgba(0,0,0,0.2); border: 1px solid rgba(82,200,219,0.3); padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem;">
        <h3 style="color: #52c8db; margin: 0 0 1.5rem 0; font-size: 1.2rem; font-weight: 600;">Inputs</h3>
        <div style="max-height: 300px; overflow-y: auto;">
            ${inputsHtml}
        </div>
    </div>`;
},

renderTransactionOutputs(txData) {
    let outputsHtml = '';
    
    if (txData.vout && txData.vout.length > 0) {
        outputsHtml = txData.vout.map((output, index) => `
            <div style="padding: 1rem 0; border-bottom: 1px solid rgba(255,255,255,0.1); last-child:border-bottom: none;">
                <div style="color: #52c8db; font-weight: 600; margin-bottom: 0.5rem;">Output ${index + 1}</div>
                <div style="font-family: monospace; color: #b3b3b3; font-size: 0.85rem; margin-bottom: 0.5rem; word-break: break-all;">${output.target ? output.target.key : 'Hidden (Ring CT)'}</div>
                ${output.amount ? `<div style="color: #4ade80; font-weight: 500;">Amount: ${(output.amount / 100000).toFixed(5)} DERO</div>` : ''}
            </div>
        `).join('');
    } else {
        outputsHtml = '<div style="padding: 2rem; text-align: center; color: #b3b3b3;">No visible outputs (Ring CT)</div>';
    }
    
    return `<div style="background: rgba(0,0,0,0.2); border: 1px solid rgba(82,200,219,0.3); padding: 1.5rem; border-radius: 8px;">
        <h3 style="color: #52c8db; margin: 0 0 1.5rem 0; font-size: 1.2rem; font-weight: 600;">Outputs</h3>
        <div style="max-height: 300px; overflow-y: auto;">
            ${outputsHtml}
        </div>
    </div>`;
},

calculateRingSize(txData) {
    if (!txData || !txData.vin || txData.vin.length === 0) return 'Coinbase';
    
    const vin = txData.vin[0];
    if (vin && vin.key && vin.key.key_offsets) {
        return vin.key.key_offsets.length;
    } else if (vin && vin.key && vin.key.k_image) {
        return 1;
    } else if (txData.rct_signatures && txData.rct_signatures.MGs && txData.rct_signatures.MGs.length > 0) {
        const mg = txData.rct_signatures.MGs[0];
        return mg.ss ? mg.ss.length : mg.cc ? mg.cc.length : txData.vin.length;
    }
    
    return txData.vin.length;
},

determineTxType(txData, ringSize) {
    if (ringSize === 'Coinbase') return 'Coinbase';
    if (txData.scdata) return 'Smart Contract';
    return 'Transfer';
},

getRingColor(ringSize) {
    if (ringSize === 'Coinbase') return '#fbbf24';
    if (typeof ringSize === 'number') {
        if (ringSize >= 16) return '#4ade80';
        if (ringSize >= 8) return '#52c8db';
        if (ringSize >= 2) return '#fbbf24';
        return '#ef4444';
    }
    return '#888';
},

getRingBorderColor(ringSize) {
    if (ringSize === 'Coinbase') return 'rgba(251,191,36,0.3)';
    if (typeof ringSize === 'number') {
        if (ringSize >= 16) return 'rgba(74,222,128,0.3)';
        if (ringSize >= 8) return 'rgba(82,200,219,0.3)';
        if (ringSize >= 2) return 'rgba(251,191,36,0.3)';
        return 'rgba(239,68,68,0.3)';
    }
    return 'rgba(136,136,136,0.3)';
},

formatAge(milliseconds) {
    if (milliseconds < 0) return 'Future';
    
    const seconds = Math.floor(milliseconds / 1000);
    if (seconds < 60) return `${seconds} seconds ago`;
    
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60) return `${minutes} minutes ago`;
    
    const hours = Math.floor(minutes / 60);
    if (hours < 24) return `${hours} hours ago`;
    
    const days = Math.floor(hours / 24);
    if (days < 30) return `${days} days ago`;
    
    const months = Math.floor(days / 30);
    if (months < 12) return `${months} months ago`;
    
    const years = Math.floor(months / 12);
    return `${years} years ago`;
}
})